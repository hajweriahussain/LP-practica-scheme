# Generated from scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        3,14,111,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,28,1,28,1,28,1,28,1,29,1,29,5,29,181,8,29,10,29,12,29,184,9,29,
        1,30,4,30,187,8,30,11,30,12,30,188,1,31,1,31,5,31,193,8,31,10,31,
        12,31,196,9,31,1,31,1,31,1,32,1,32,5,32,202,8,32,10,32,12,32,205,
        9,32,1,32,1,32,1,33,4,33,210,8,33,11,33,12,33,211,1,33,1,33,0,0,
        34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,
        0,6,3,0,65,90,95,95,97,122,6,0,45,45,48,57,63,63,65,90,95,95,97,
        122,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,13,
        13,32,32,220,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,
        1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,79,
        1,0,0,0,13,81,1,0,0,0,15,84,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,
        21,92,1,0,0,0,23,94,1,0,0,0,25,96,1,0,0,0,27,103,1,0,0,0,29,110,
        1,0,0,0,31,112,1,0,0,0,33,116,1,0,0,0,35,119,1,0,0,0,37,123,1,0,
        0,0,39,128,1,0,0,0,41,132,1,0,0,0,43,136,1,0,0,0,45,141,1,0,0,0,
        47,147,1,0,0,0,49,151,1,0,0,0,51,156,1,0,0,0,53,164,1,0,0,0,55,172,
        1,0,0,0,57,174,1,0,0,0,59,178,1,0,0,0,61,186,1,0,0,0,63,190,1,0,
        0,0,65,199,1,0,0,0,67,209,1,0,0,0,69,70,5,43,0,0,70,2,1,0,0,0,71,
        72,5,45,0,0,72,4,1,0,0,0,73,74,5,42,0,0,74,6,1,0,0,0,75,76,5,47,
        0,0,76,8,1,0,0,0,77,78,5,60,0,0,78,10,1,0,0,0,79,80,5,62,0,0,80,
        12,1,0,0,0,81,82,5,60,0,0,82,83,5,61,0,0,83,14,1,0,0,0,84,85,5,62,
        0,0,85,86,5,61,0,0,86,16,1,0,0,0,87,88,5,61,0,0,88,18,1,0,0,0,89,
        90,5,60,0,0,90,91,5,62,0,0,91,20,1,0,0,0,92,93,5,40,0,0,93,22,1,
        0,0,0,94,95,5,41,0,0,95,24,1,0,0,0,96,97,5,100,0,0,97,98,5,101,0,
        0,98,99,5,102,0,0,99,100,5,105,0,0,100,101,5,110,0,0,101,102,5,101,
        0,0,102,26,1,0,0,0,103,104,5,105,0,0,104,105,5,102,0,0,105,28,1,
        0,0,0,106,107,5,35,0,0,107,111,5,116,0,0,108,109,5,35,0,0,109,111,
        5,102,0,0,110,106,1,0,0,0,110,108,1,0,0,0,111,30,1,0,0,0,112,113,
        5,97,0,0,113,114,5,110,0,0,114,115,5,100,0,0,115,32,1,0,0,0,116,
        117,5,111,0,0,117,118,5,114,0,0,118,34,1,0,0,0,119,120,5,110,0,0,
        120,121,5,111,0,0,121,122,5,116,0,0,122,36,1,0,0,0,123,124,5,99,
        0,0,124,125,5,111,0,0,125,126,5,110,0,0,126,127,5,100,0,0,127,38,
        1,0,0,0,128,129,5,99,0,0,129,130,5,97,0,0,130,131,5,114,0,0,131,
        40,1,0,0,0,132,133,5,99,0,0,133,134,5,100,0,0,134,135,5,114,0,0,
        135,42,1,0,0,0,136,137,5,99,0,0,137,138,5,111,0,0,138,139,5,110,
        0,0,139,140,5,115,0,0,140,44,1,0,0,0,141,142,5,110,0,0,142,143,5,
        117,0,0,143,144,5,108,0,0,144,145,5,108,0,0,145,146,5,63,0,0,146,
        46,1,0,0,0,147,148,5,108,0,0,148,149,5,101,0,0,149,150,5,116,0,0,
        150,48,1,0,0,0,151,152,5,114,0,0,152,153,5,101,0,0,153,154,5,97,
        0,0,154,155,5,100,0,0,155,50,1,0,0,0,156,157,5,100,0,0,157,158,5,
        105,0,0,158,159,5,115,0,0,159,160,5,112,0,0,160,161,5,108,0,0,161,
        162,5,97,0,0,162,163,5,121,0,0,163,52,1,0,0,0,164,165,5,110,0,0,
        165,166,5,101,0,0,166,167,5,119,0,0,167,168,5,108,0,0,168,169,5,
        105,0,0,169,170,5,110,0,0,170,171,5,101,0,0,171,54,1,0,0,0,172,173,
        5,39,0,0,173,56,1,0,0,0,174,175,5,109,0,0,175,176,5,111,0,0,176,
        177,5,100,0,0,177,58,1,0,0,0,178,182,7,0,0,0,179,181,7,1,0,0,180,
        179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
        60,1,0,0,0,184,182,1,0,0,0,185,187,7,2,0,0,186,185,1,0,0,0,187,188,
        1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,62,1,0,0,0,190,194,5,
        34,0,0,191,193,8,3,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,
        0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,
        34,0,0,198,64,1,0,0,0,199,203,5,59,0,0,200,202,8,4,0,0,201,200,1,
        0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,
        0,0,0,205,203,1,0,0,0,206,207,6,32,0,0,207,66,1,0,0,0,208,210,7,
        5,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,
        0,0,0,212,213,1,0,0,0,213,214,6,33,0,0,214,68,1,0,0,0,7,0,110,182,
        188,194,203,211,1,6,0,0
    ]

class schemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    LPAREN = 11
    RPAREN = 12
    DEFINE = 13
    IF = 14
    BOOL = 15
    AND = 16
    OR = 17
    NOT = 18
    COND = 19
    CAR = 20
    CDR = 21
    CONS = 22
    NULL = 23
    LET = 24
    READ = 25
    DISPLAY = 26
    NEWLINE = 27
    SLASH = 28
    MOD = 29
    VAR = 30
    NUM = 31
    STRING = 32
    COMMENT = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", "'='", 
            "'<>'", "'('", "')'", "'define'", "'if'", "'and'", "'or'", "'not'", 
            "'cond'", "'car'", "'cdr'", "'cons'", "'null?'", "'let'", "'read'", 
            "'display'", "'newline'", "'''", "'mod'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "DEFINE", "IF", "BOOL", "AND", "OR", "NOT", 
            "COND", "CAR", "CDR", "CONS", "NULL", "LET", "READ", "DISPLAY", 
            "NEWLINE", "SLASH", "MOD", "VAR", "NUM", "STRING", "COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "LPAREN", "RPAREN", "DEFINE", 
                  "IF", "BOOL", "AND", "OR", "NOT", "COND", "CAR", "CDR", 
                  "CONS", "NULL", "LET", "READ", "DISPLAY", "NEWLINE", "SLASH", 
                  "MOD", "VAR", "NUM", "STRING", "COMMENT", "WS" ]

    grammarFileName = "scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


